"""0009_app_reports

Revision ID: 1eccc995f1ac
Revises: c85dfd9fdcb2
Create Date: 2025-02-19 13:50:20.236011

"""
from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text
from sqlalchemy.schema import Sequence, CreateSequence, DropSequence  # Added manually.

# revision identifiers, used by Alembic.
revision = '1eccc995f1ac'
down_revision = 'c85dfd9fdcb2'
branch_labels = None
depends_on = None


def upgrade():
    # ### Manually create sequences. ###
    op.execute(CreateSequence(Sequence('service_report_id_seq', start=100000, increment=1)))
    op.execute(CreateSequence(Sequence('application_report_id_seq', start=1, increment=1)))

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('application_reports',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('document_service_id', sa.String(length=20), nullable=False),
    sa.Column('create_ts', sa.DateTime(), nullable=False),
    sa.Column('entity_id', sa.String(length=20), nullable=False),
    sa.Column('event_id', sa.Integer(), nullable=False),
    sa.Column('report_type', sa.String(length=30), nullable=False),
    sa.Column('filename', sa.String(length=1000), nullable=True),
    sa.Column('filing_date', sa.DateTime(), nullable=True),
    sa.Column('doc_storage_url', sa.String(length=1000), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('document_service_id')
    )
    with op.batch_alter_table('application_reports', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_application_reports_create_ts'), ['create_ts'], unique=False)
        batch_op.create_index(batch_op.f('ix_application_reports_entity_id'), ['entity_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_application_reports_event_id'), ['event_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_application_reports_filing_date'), ['filing_date'], unique=False)

    public_get_service_report_id = PGFunction(
        schema="public",
        signature="get_service_report_id()",
        definition="RETURNS VARCHAR\n    LANGUAGE plpgsql\n    AS\n    $$\n    BEGIN\n        RETURN 'DSR' || trim(to_char(nextval('service_report_id_seq'), '0000000000'));\n    END\n    ;\n    $$"
    )
    op.create_entity(public_get_service_report_id)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    public_get_service_report_id = PGFunction(
        schema="public",
        signature="get_service_report_id()",
        definition="RETURNS VARCHAR\n    LANGUAGE plpgsql\n    AS\n    $$\n    BEGIN\n        RETURN 'DSR' || trim(to_char(nextval('service_report_id_seq'), '0000000000'));\n    END\n    ;\n    $$"
    )
    op.drop_entity(public_get_service_report_id)

    with op.batch_alter_table('application_reports', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_application_reports_filing_date'))
        batch_op.drop_index(batch_op.f('ix_application_reports_event_id'))
        batch_op.drop_index(batch_op.f('ix_application_reports_entity_id'))
        batch_op.drop_index(batch_op.f('ix_application_reports_create_ts'))

    op.drop_table('application_reports')

    # Manually added drop sequence commands ###
    op.execute(DropSequence(Sequence('service_report_id_seq')))
    op.execute(DropSequence(Sequence('application_report_id_seq')))
    # ### end Alembic commands ###
