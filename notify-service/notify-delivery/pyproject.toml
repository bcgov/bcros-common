[tool.poetry]
name = "notify-delivery"
version = "2.0.2"
description = "This module is the service worker for delivery emails."
authors = ["pwei1018 <patrick.wei@gov.bc.ca>"]
license = "BSD-3-Clause"
readme = "README.md"
packages = [{include = "notify_delivery", from = "src"}]

[tool.poetry.dependencies]
python = "^3.12"
notify-api = { git = "https://github.com/bcgov/bcros-common.git", subdirectory = "notify-service/notify-api",  branch = "feature-schema-follow-up" }

[tool.poetry.group.test.dependencies]
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
requests-mock = "^1.12.1"
faker = "^25.9.2"
freezegun = "^1.5.1"
aiohttp = "^3.11.15"

[tool.poetry.group.dev.dependencies]
ruff = "^0.11.2"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".vscode",
    "dist",
    "htmlcov",
    "venv",
    "migrations",
    "devops",
    ".history"
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle
    "F",   # Pyflakes
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "I",   # isort
    "N",   # pep8-naming
    "PL",  # pyLint
]
ignore = [
    "F401",
    "E501", # https://stackoverflow.com/questions/76771858/ruff-does-not-autofix-line-too-long-violation
    "B904", # use 'raise ... from err'
    "B905", # use explicit 'strict=' parameter with 'zip()'
    "N999"
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = [
    "ERA", # do not autoremove commented out code
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
known-first-party = ["notify_delivery"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.pytest.ini_options]
minversion = "2.0"
testpaths = [
   "tests",
]
addopts = "--verbose --strict -p no:warnings --cov=src --cov-report html:htmlcov --cov-report xml:coverage.xml"
python_files = [
   "test*.py"
]
norecursedirs = [
   ".git", ".tox", "venv*", "requirements*", "build",
]
log_cli = true
log_cli_level = "INFO"
filterwarnings = [
   "ignore::UserWarning"
]
markers = [
   "slow",
   "serial",
]

[tool.coverage.run]
branch = true
source = [
   "src/notify_delivery",
]
omit = [
    "wsgi.py",
    "gunicorn_config.py"
]

[tool.coverage.report]
exclude_lines = [
   "pragma: no cover",
   "from",
   "import",
   "def __repr__",
   "if self.debug:",
   "if settings.DEBUG",
   "raise AssertionError",
   "raise NotImplementedError",
   "if 0:",
   'if __name__ == "__main__":',
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
